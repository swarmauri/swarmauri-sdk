[project]
name = "swarmauri-monorepo"
version = "0.6.2.dev3"
description = "Monorepo for multiple interdependent Swarmauri Python packages"
authors = [{ name = "Jacob Stewart", email = "jacob@swarmauri.com" }]
license = "Apache-2.0"
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.10,<3.13"

[dependency-groups]
dev = [
    "toml>=0.10.2",
    "pytest>=8.0.0",
    "pytest-xdist>=3.6.1",
    "pytest-asyncio>=0.24.0",
    "pytest-timeout>=2.3.1",
    "pytest-json-report>=1.5.0",
    "python-dotenv>=1.0.0",
    "pytest-mock>=3.14.0",
    "jsonschema>=4.18.5",
    "ruff",
]

[tool.uv]
package = false

[tool.uv.workspace]
members = [
    "core",
    "typing",
    "base",
    "swarmauri_standard",
    "standards/swarmauri_parser_beautifulsoupelement",
    "standards/swarmauri_distance_minkowski",
    "standards/swarmauri_vectorstore_tfidf",
    "standards/swarmauri_tool_matplotlib",
    "standards/swarmauri_embedding_nmf",
    "standards/swarmauri_parser_keywordextractor",
    "standards/swarmauri_embedding_tfidf",
    "standards/swarmauri_embedding_doc2vec",
    "experimental/ptree_dag",
    "community/swarmauri_tool_smogindex",
    "community/swarmauri_tool_jupyterreadnotebook",
    "community/swarmauri_tool_jupyterexecutenotebook",
    "community/swarmauri_tool_jupyterclearoutput",
    "community/swarmauri_tool_jupyterstartkernel",
    "community/swarmauri_vectorstore_pinecone",
    "community/swarmauri_parser_fitzpdf",
    "community/swarmauri_tool_jupytergetshellmessage",
    "community/swarmauri_llm_leptonai",
    "community/swarmauri_parser_bertembedding",
    "community/swm_example_community_package",
    "community/swarmauri_tool_gmail",
    "community/swarmauri_tool_jupyterexecutenotebookwithparameters",
    "community/swarmauri_tool_sentencecomplexity",
    "community/swarmauri_tool_jupyterexportlatex",
    "community/swarmauri_tool_jupytervalidatenotebook",
    "community/swarmauri_tool_webscraping",
    "community/swarmauri_vectorstore_annoy",
    "community/swarmauri_tool_jupyterexportmarkdown",
    "community/swarmauri_tool_jupyterwritenotebook",
    "community/swarmauri_vectorstore_mlm",
    "community/swarmauri_tool_dalechallreadability",
    "community/swarmauri_tool_captchagenerator",
    "community/swarmauri_parser_textblob",
    "community/swarmauri_documentstore_redis",
    "community/swarmauri_state_clipboard",
    "community/swarmauri_tool_sentimentanalysis",
    "community/swarmauri_parser_pypdf2",
    "community/swarmauri_tool_jupyterexecutecell",
    "community/swarmauri_tool_textlength",
    "community/swarmauri_tool_jupyterruncell",
    "community/swarmauri_tool_jupytergetiopubmessage",
    "community/swarmauri_vectorstore_duckdb",
    "community/swarmauri_vectorstore_qdrant",
    "community/swarmauri_measurement_tokencountestimator",
    "community/swarmauri_tool_folium",
    "community/swarmauri_tool_psutil",
    "community/swarmauri_embedding_mlm",
    "community/swarmauri_tool_jupyterdisplayhtml",
    "community/swarmauri_tool_qrcodegenerator",
    "community/swarmauri_ocr_pytesseract",
    "community/swarmauri_vectorstore_redis",
    "community/swarmauri_toolkit_jupytertoolkit",
    "community/swarmauri_vectorstore_persistentchromadb",
    "community/swarmauri_toolkit_github",
    "community/swarmauri_vectorstore_cloudweaviate",
    "community/swarmauri_tool_jupyterexecuteandconvert",
    "community/swarmauri_tool_entityrecognition",
    "community/swarmauri_tool_jupytershutdownkernel",
    "community/swarmauri_tool_jupyterfromdict",
    "community/swarmauri_vectorstore_neo4j",
    "community/swarmauri_parser_entityrecognition",
    "community/swarmauri_tool_jupyterexportpython",
    "community/swarmauri_measurement_mutualinformation",
    "community/swarmauri_tool_jupyterexporthtml",
    "community/swarmauri_tool_lexicaldensity",
    "community/swarmauri_tool_jupyterdisplay",
    "community/swarmauri_tool_zapierhook",
    "community/swarmauri_tool_downloadpdf",
    "swarmauri",
]


[tool.pytest.ini_options]
timeout = 300

norecursedirs = ["experimental", "standards/*", "community/*"]

markers = [
    "test: standard test",
    "unit: Unit tests",
    "i9n: Integration Tests",
    "r8n: Regression Tests",
    "timeout: mark test to timeout after X seconds",
    "xfail: Expected failures",
    "xpass: Expected passes",
    "acceptance: Acceptance tests",
]


log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

asyncio_default_fixture_loop_scope = "function"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

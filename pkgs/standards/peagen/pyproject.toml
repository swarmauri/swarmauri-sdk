[project]
name = "peagen"
version = "0.1.4.dev3"
description = "Swarmauri's Peagan - An AI-driven contextual, dependency-based scaffolding tool for rapid content generation."
authors = [{ name = "Jacob Stewart", email = "jacob@swarmauri.com" }]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/swarmauri/swarmauri-sdk/pkgs/standards/peagen/peagen"
requires-python = ">=3.10,<3.13"
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [

    # are servers optional?
    "httpx[http2]>=0.27", # required
    "websockets>=12", # need to push out to a standalone with extra
    "h11>=0.16.0",
    
    # are servers optional?
    "uvicorn[standard]>=0.29",
    "fastapi>=0.111",



    "python-dotenv", # does this come with standard?
    "pyyaml", # should come with swarmauri_standard, but we can explicitly mention here

    "jsonpatch>=1.33",
    "jsonschema>=4.18.5",

    "jinja2>=3.1.6", # should come with j2prompttemplate, but is it required anywhere else on its own?
    "inflect", # should come with j2prompttemplate, but is it required anywhere else on its own?

    "typer",   # for cli
    "colorama",# for cli
    
    "textual", # for tui
    "rich", # for tui

    "swarmauri_core",
    "swarmauri_base",
    "swarmauri_standard",
    "swarmauri",
    "swarmauri_prompt_j2prompttemplate",

    "pydantic-settings>=2.2", 
    "pydantic[email]>=2.7", # why is this necessary?

    # plugins —————————————————————————————————————————————————————————————————————————
    # result_backends/indexers
    "sqlalchemy>=2.0",
    "asyncpg>=0.30.0", # need to push out to a standalone with extra
    "psycopg2-binary", # need to push out to a standalone with extra
    
    # brokers (publishers/consumer dependencies)
    "redis", # this publisher needs to be pushed to its own standalone
    "redis[hiredis]>=5.0", # provides redis.asyncio
    "pika", # need to push out to a standalone with extra

    # artifacts
    "PyGithub", # this storage adapter needs to be pushed to its own standalone
    "minio", # this storage adapter needs to be pushed to its own standalone

]


[tool.uv.sources]
swarmauri_core = { workspace = true }
swarmauri_base = { workspace = true }
swarmauri_standard = { workspace = true }

[tool.pytest.ini_options]
norecursedirs = ["combined", "scripts"]
markers = [
    "test: standard test",
    "unit: Unit tests",
    "i9n: Integration tests",
    "r8n: Regression tests",
    "timeout: mark test to timeout after X seconds",
    "xpass: Expected passes",
    "xfail: Expected failures",
    "acceptance: Acceptance tests",
    "perf: Performance tests that measure execution time and resource usage",
]
timeout = 300
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_default_fixture_loop_scope = "function"

[project.scripts]
peagen = "peagen.cli:app"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[dependency-groups]
dev = [
    "pytest>=8.0",
    "pytest-asyncio>=0.24.0",
    "pytest-xdist>=3.6.1",
    "pytest-json-report>=1.5.0",
    "python-dotenv",
    "httpx>=0.27.0",
    "flake8>=7.0",
    "pytest-timeout>=2.3.1",
    "ruff>=0.9.9",
    "pytest-benchmark>=4.0.0",
]

[project.entry-points."peagen.template_sets"]
react_atom                            = "peagen.template_sets.react_atom"
svelte_atom                           = "peagen.template_sets.svelte_atom"
vue_atom                              = "peagen.template_sets.vue_atom"
swarmauri_base                        = "peagen.template_sets.swarmauri_base"
swarmauri_core                        = "peagen.template_sets.swarmauri_core"
swarmauri_standard                    = "peagen.template_sets.swarmauri_standard"
swarmauri_standard_standalone         = "peagen.template_sets.swarmauri_standard_standalone"
swarmauri_community                   = "peagen.template_sets.swarmauri_community"
python_orm                            = "peagen.template_sets.python_orm"
rust_python_pkg                       = "peagen.template_sets.rust_python_pkg"
cpp_python_pkg                        = "peagen.template_sets.cpp_python_pkg"
init-project                          = "peagen.template_scaffold.project"
init-template-set                     = "peagen.template_scaffold.template_set"
init-doe-spec                         = "peagen.template_scaffold.doe_spec"
init-ci                               = "peagen.template_scaffold.ci"

[project.entry-points."peagen.storage_adapters"]
minio   = "peagen.storage_adapters.minio_storage_adapter:MinioStorageAdapter"
file    = "peagen.storage_adapters.file_storage_adapter:FileStorageAdapter"
github    = "peagen.storage_adapters.github_storage_adapter:GithubStorageAdapter"
gh_release    = "peagen.storage_adapters.gh_release_storage_adapter:GithubReleaseStorageAdapter"

[project.entry-points."peagen.publishers"]
redis   = "peagen.publishers.redis_publisher:RedisPublisher"
webhook = "peagen.publishers.webhook_publisher:WebhookPublisher"
rabbitmq = "peagen.publishers.rabbitmq_publisher:RabbitMQPublisher"

[project.entry-points."peagen.plugins.llms"]
AI21StudioModel = "peagen.plugins.llms:AI21StudioModel"
AnthropicModel = "peagen.plugins.llms:AnthropicModel"
CerebrasModel = "peagen.plugins.llms:CerebrasModel"
CohereModel = "peagen.plugins.llms:CohereModel"
DeepInfraModel = "peagen.plugins.llms:DeepInfraModel"
DeepSeekModel = "peagen.plugins.llms:DeepSeekModel"
GeminiProModel = "peagen.plugins.llms:GeminiProModel"
GroqModel = "peagen.plugins.llms:GroqModel"
HyperbolicModel = "peagen.plugins.llms:HyperbolicModel"
LLM = "peagen.plugins.llms:LLM"
LlamaCppModel = "peagen.plugins.llms:LlamaCppModel"
MistralModel = "peagen.plugins.llms:MistralModel"
OpenAIModel = "peagen.plugins.llms:OpenAIModel"
OpenAIReasonModel = "peagen.plugins.llms:OpenAIReasonModel"
PerplexityModel = "peagen.plugins.llms:PerplexityModel"

[tool.setuptools.package-data]
"peagen.schemas" = ["*.json", "extras/*.json"]

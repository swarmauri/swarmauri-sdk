"""automated revision

Revision ID: 97a9f54587b2
Revises: 9b2c3d4e5f6a
Create Date: 2025-06-27 16:41:16.828358

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision: str = "97a9f54587b2"
down_revision: Union[str, None] = "9b2c3d4e5f6a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    bind = op.get_bind()
    if bind.dialect.name == "sqlite":
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "doe_specs",
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("schema_version", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("spec", sa.JSON(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("tenant_id", "name", name="uq_doe_spec_per_tenant"),
    )
    op.create_table(
        "evolve_specs",
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("schema_version", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("spec", sa.JSON(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("tenant_id", "name", name="uq_evolve_spec_per_tenant"),
    )
    op.create_table(
        "pools",
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("capacity", sa.Integer(), nullable=False),
        sa.Column("policy", sa.JSON(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("tenant_id", "name", name="uq_pool_per_tenant"),
    )
    op.create_table(
        "repositories",
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("url", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("default_branch", sa.String(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("tenant_id", "name", name="uq_repository_per_tenant"),
    )
    op.create_table(
        "task_relations",
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("tenant_id", "name", name="uq_task_relation_per_tenant"),
    )
    op.create_table(
        "tenant_user_associations",
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("role", sa.String(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("tenant_id", "user_id", name="uq_tenant_user_association"),
    )
    op.create_table(
        "workers",
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("hostname", sa.String(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "idle", "reserved", "running", "offline", name="worker_status_enum"
            ),
            nullable=False,
        ),
        sa.Column("last_heartbeat", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("metrics", sa.JSON(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("tenant_id", "name", name="uq_worker_per_tenant"),
    )
    op.create_table(
        "git_references",
        sa.Column("repository_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("commit_sha", sa.String(length=40), nullable=True),
        sa.Column("remote_name", sa.String(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["repository_id"], ["repositories.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("repository_id", "name", name="uq_ref_per_repo"),
    )
    op.create_table(
        "peagen_toml_specs",
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.Column("repository_id", sa.UUID(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("schema_version", sa.String(), nullable=False),
        sa.Column("raw_toml", sa.Text(), nullable=False),
        sa.Column("parsed", sa.JSON(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["repository_id"], ["repositories.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("tenant_id", "name", name="uq_toml_per_tenant"),
    )
    op.create_table(
        "pool_worker_associations",
        sa.Column("pool_id", sa.UUID(), nullable=False),
        sa.Column("worker_id", sa.UUID(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("active", "disabled", name="pool_worker_status_enum"),
            nullable=False,
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["pool_id"], ["pools.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["worker_id"], ["workers.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("pool_id", "worker_id", name="uq_pool_worker"),
    )
    op.create_table(
        "project_payloads",
        sa.Column("tenant_id", sa.UUID(), nullable=False),
        sa.Column("doe_spec_id", sa.UUID(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("schema_version", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("payload", sa.JSON(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["doe_spec_id"], ["doe_specs.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("tenant_id", "name", name="uq_project_per_tenant"),
    )
    op.create_table(
        "repository_user_associations",
        sa.Column("repository_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("role", sa.String(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["repository_id"], ["repositories.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "repository_id", "user_id", name="uq_repo_user_association"
        ),
    )
    op.create_table(
        "repository_deploy_key_associations",
        sa.Column("repository_id", sa.UUID(), nullable=False),
        sa.Column("deploy_key_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["deploy_key_id"], ["deploy_keys.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["repository_id"], ["repositories.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "repository_id", "deploy_key_id", name="uq_repository_deploy_key"
        ),
    )
    op.create_table(
        "raw_blobs",
        sa.Column("task_id", sa.UUID(), nullable=False),
        sa.Column("media_type", sa.String(), nullable=False),
        sa.Column(
            "encoding",
            sa.Enum("utf-8", "base64", "binary", name="blob_encoding_enum"),
            nullable=False,
        ),
        sa.Column("data", sa.LargeBinary(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["task_id"], ["tasks.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "eval_results",
        sa.Column("task_run_id", sa.UUID(), nullable=False),
        sa.Column("label", sa.String(), nullable=True),
        sa.Column("metrics", sa.JSON(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["task_run_id"], ["task_runs.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "task_run_task_relation_associations",
        sa.Column("task_run_id", sa.UUID(), nullable=False),
        sa.Column("relation_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["relation_id"], ["task_relations.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["task_run_id"], ["task_runs.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("task_run_id", "relation_id", name="uq_task_run_relation"),
    )
    op.create_table(
        "analysis_results",
        sa.Column("eval_result_id", sa.UUID(), nullable=False),
        sa.Column("summary", sa.Text(), nullable=True),
        sa.Column("data", sa.JSON(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["eval_result_id"], ["eval_results.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_index(op.f("ix_artifacts_task_id"), table_name="artifacts")
    op.drop_index(op.f("ix_artifacts_tenant_id"), table_name="artifacts")
    op.drop_table("artifacts")
    op.drop_table("task_run_deps")
    bind = op.get_bind()
    if bind.dialect.name != "sqlite":
        op.alter_column(
            "abuse_records",
            "first_seen",
            existing_type=sa.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
        )
    op.add_column("deploy_keys", sa.Column("user_id", sa.UUID(), nullable=False))
    op.add_column("deploy_keys", sa.Column("public_key", sa.Text(), nullable=False))
    op.add_column("deploy_keys", sa.Column("secret_id", sa.UUID(), nullable=False))
    op.add_column("deploy_keys", sa.Column("read_only", sa.Boolean(), nullable=False))
    op.add_column(
        "deploy_keys",
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
    )
    op.add_column(
        "deploy_keys",
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
    )
    op.alter_column(
        "deploy_keys",
        "id",
        existing_type=sa.NUMERIC(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_deploy_keys_public_key_id"), table_name="deploy_keys")
    op.drop_index(op.f("ix_deploy_keys_tenant_id"), table_name="deploy_keys")
    op.drop_constraint(
        op.f("uq_deploy_keys_tenant_name"), "deploy_keys", type_="unique"
    )
    op.create_unique_constraint(
        "uq_deploykey_per_user", "deploy_keys", ["user_id", "name"]
    )
    op.drop_constraint(None, "deploy_keys", type_="foreignkey")
    op.drop_constraint(None, "deploy_keys", type_="foreignkey")
    op.create_foreign_key(
        None, "deploy_keys", "users", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None, "deploy_keys", "secrets", ["secret_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_column("deploy_keys", "key")
    op.drop_column("deploy_keys", "created_at")
    op.drop_column("deploy_keys", "tenant_id")
    op.drop_column("deploy_keys", "updated_at")
    op.drop_column("deploy_keys", "public_key_id")
    op.add_column(
        "public_keys",
        sa.Column(
            "key_type",
            sa.Enum(
                "ssh_rsa",
                "ssh_ed25519",
                "ssh_ecdsa",
                "pgp",
                name="public_key_type_enum",
            ),
            nullable=False,
        ),
    )
    op.add_column("public_keys", sa.Column("key_data", sa.Text(), nullable=False))
    op.add_column("public_keys", sa.Column("fingerprint", sa.String(), nullable=False))
    op.add_column("public_keys", sa.Column("revoked", sa.Boolean(), nullable=False))
    op.add_column(
        "public_keys",
        sa.Column("revoked_at", sa.TIMESTAMP(timezone=True), nullable=True),
    )
    op.add_column(
        "public_keys",
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
    )
    op.add_column(
        "public_keys",
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
    )
    op.alter_column(
        "public_keys",
        "user_id",
        existing_type=sa.NUMERIC(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "public_keys",
        "id",
        existing_type=sa.NUMERIC(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_public_keys_tenant_id"), table_name="public_keys")
    op.drop_index(op.f("ix_public_keys_user_id"), table_name="public_keys")
    op.drop_constraint(
        op.f("uq_public_keys_tenant_name"), "public_keys", type_="unique"
    )
    op.create_unique_constraint(
        "uq_public_key_label_per_user", "public_keys", ["user_id", "name"]
    )
    op.create_unique_constraint(None, "public_keys", ["fingerprint"])
    op.drop_constraint(None, "public_keys", type_="foreignkey")
    op.drop_constraint(None, "public_keys", type_="foreignkey")
    op.create_foreign_key(
        None, "public_keys", "users", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_column("public_keys", "tenant_id")
    op.drop_column("public_keys", "created_at")
    op.drop_column("public_keys", "updated_at")
    op.drop_column("public_keys", "key")
    op.add_column("secrets", sa.Column("owner_user_id", sa.UUID(), nullable=True))
    op.add_column("secrets", sa.Column("cipher", sa.Text(), nullable=False))
    op.add_column("secrets", sa.Column("description", sa.String(), nullable=True))
    op.add_column(
        "secrets", sa.Column("date_created", sa.DateTime(timezone=True), nullable=False)
    )
    op.add_column(
        "secrets",
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
    )
    op.alter_column(
        "secrets",
        "tenant_id",
        existing_type=sa.NUMERIC(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "secrets",
        "id",
        existing_type=sa.NUMERIC(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_secrets_tenant_id"), table_name="secrets")
    op.drop_index(op.f("ix_secrets_user_id"), table_name="secrets")
    op.drop_constraint(op.f("uq_secrets_tenant_name"), "secrets", type_="unique")
    op.create_unique_constraint(
        "uq_secret_per_tenant", "secrets", ["tenant_id", "name"]
    )
    op.drop_constraint(None, "secrets", type_="foreignkey")
    op.drop_constraint(None, "secrets", type_="foreignkey")
    op.create_foreign_key(
        None, "secrets", "users", ["owner_user_id"], ["id"], ondelete="SET NULL"
    )
    op.create_foreign_key(
        None, "secrets", "tenants", ["tenant_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_column("secrets", "user_id")
    op.drop_column("secrets", "created_at")
    op.drop_column("secrets", "value")
    op.drop_column("secrets", "updated_at")
    op.add_column("task_runs", sa.Column("task_id", sa.UUID(), nullable=False))
    op.add_column("task_runs", sa.Column("pool_id", sa.UUID(), nullable=True))
    op.add_column("task_runs", sa.Column("worker_id", sa.UUID(), nullable=True))
    op.add_column("task_runs", sa.Column("user_id", sa.UUID(), nullable=True))
    op.add_column(
        "task_runs",
        sa.Column("date_created", sa.DateTime(timezone=True), nullable=False),
    )
    op.add_column(
        "task_runs",
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
    )
    op.alter_column(
        "task_runs",
        "id",
        existing_type=sa.NUMERIC(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.create_foreign_key(
        None, "task_runs", "users", ["user_id"], ["id"], ondelete="SET NULL"
    )
    op.create_foreign_key(
        None, "task_runs", "workers", ["worker_id"], ["id"], ondelete="SET NULL"
    )
    op.create_foreign_key(
        None, "task_runs", "pools", ["pool_id"], ["id"], ondelete="SET NULL"
    )
    op.create_foreign_key(
        None, "task_runs", "tasks", ["task_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_column("task_runs", "oids")
    op.drop_column("task_runs", "in_degree")
    op.drop_column("task_runs", "finished_at")
    op.drop_column("task_runs", "commit_hexsha")
    op.drop_column("task_runs", "payload")
    op.drop_column("task_runs", "config_toml")
    op.drop_column("task_runs", "labels")
    op.drop_column("task_runs", "edge_pred")
    op.drop_column("task_runs", "started_at")
    op.drop_column("task_runs", "pool")
    op.add_column("tasks", sa.Column("git_reference_id", sa.UUID(), nullable=True))
    op.add_column("tasks", sa.Column("parameters", sa.JSON(), nullable=False))
    op.add_column("tasks", sa.Column("note", sa.Text(), nullable=True))
    op.add_column(
        "tasks", sa.Column("date_created", sa.DateTime(timezone=True), nullable=False)
    )
    op.add_column(
        "tasks", sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False)
    )
    op.alter_column(
        "tasks",
        "tenant_id",
        existing_type=sa.NUMERIC(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "tasks",
        "id",
        existing_type=sa.NUMERIC(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_tasks_tenant_id"), table_name="tasks")
    op.drop_constraint(op.f("uq_tasks_tenant_name"), "tasks", type_="unique")
    op.drop_constraint(None, "tasks", type_="foreignkey")
    op.create_foreign_key(
        None, "tasks", "tenants", ["tenant_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None,
        "tasks",
        "git_references",
        ["git_reference_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.drop_column("tasks", "created_at")
    op.drop_column("tasks", "name")
    op.drop_column("tasks", "updated_at")
    op.drop_column("tasks", "payload")
    op.add_column("tenants", sa.Column("slug", sa.String(), nullable=False))
    op.add_column(
        "tenants", sa.Column("date_created", sa.DateTime(timezone=True), nullable=False)
    )
    op.add_column(
        "tenants",
        sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False),
    )
    op.alter_column(
        "tenants",
        "id",
        existing_type=sa.NUMERIC(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_tenants_name"), table_name="tenants")
    op.create_unique_constraint(None, "tenants", ["slug"])
    op.drop_column("tenants", "created_at")
    op.drop_column("tenants", "updated_at")
    op.add_column("users", sa.Column("username", sa.String(), nullable=False))
    op.add_column("users", sa.Column("email", sa.String(), nullable=False))
    op.add_column("users", sa.Column("role", sa.String(), nullable=False))
    op.add_column(
        "users", sa.Column("date_created", sa.DateTime(timezone=True), nullable=False)
    )
    op.add_column(
        "users", sa.Column("last_modified", sa.DateTime(timezone=True), nullable=False)
    )
    op.alter_column(
        "users",
        "id",
        existing_type=sa.NUMERIC(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_users_tenant_id"), table_name="users")
    op.drop_constraint(op.f("uq_users_tenant_name"), "users", type_="unique")
    op.create_unique_constraint(None, "users", ["username"])
    op.create_unique_constraint(None, "users", ["email"])
    op.drop_constraint(None, "users", type_="foreignkey")
    op.drop_column("users", "tenant_id")
    op.drop_column("users", "created_at")
    op.drop_column("users", "name")
    op.drop_column("users", "updated_at")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    bind = op.get_bind()
    if bind.dialect.name == "sqlite":
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("users", sa.Column("updated_at", sa.TIMESTAMP(), nullable=False))
    op.add_column("users", sa.Column("name", sa.VARCHAR(), nullable=False))
    op.add_column("users", sa.Column("created_at", sa.TIMESTAMP(), nullable=False))
    op.add_column("users", sa.Column("tenant_id", sa.NUMERIC(), nullable=False))
    op.create_foreign_key(None, "users", "tenants", ["tenant_id"], ["id"])
    op.drop_constraint(None, "users", type_="unique")
    op.drop_constraint(None, "users", type_="unique")
    op.create_unique_constraint(
        op.f("uq_users_tenant_name"), "users", ["tenant_id", "name"]
    )
    op.create_index(op.f("ix_users_tenant_id"), "users", ["tenant_id"], unique=False)
    op.alter_column(
        "users",
        "id",
        existing_type=sa.UUID(),
        type_=sa.NUMERIC(),
        existing_nullable=False,
    )
    op.drop_column("users", "last_modified")
    op.drop_column("users", "date_created")
    op.drop_column("users", "role")
    op.drop_column("users", "email")
    op.drop_column("users", "username")
    op.add_column("tenants", sa.Column("updated_at", sa.TIMESTAMP(), nullable=False))
    op.add_column("tenants", sa.Column("created_at", sa.TIMESTAMP(), nullable=False))
    op.drop_constraint(None, "tenants", type_="unique")
    op.create_index(op.f("ix_tenants_name"), "tenants", ["name"], unique=1)
    op.alter_column(
        "tenants",
        "id",
        existing_type=sa.UUID(),
        type_=sa.NUMERIC(),
        existing_nullable=False,
    )
    op.drop_column("tenants", "last_modified")
    op.drop_column("tenants", "date_created")
    op.drop_column("tenants", "slug")
    op.add_column("tasks", sa.Column("payload", sqlite.JSON(), nullable=True))
    op.add_column("tasks", sa.Column("updated_at", sa.TIMESTAMP(), nullable=False))
    op.add_column("tasks", sa.Column("name", sa.VARCHAR(), nullable=False))
    op.add_column("tasks", sa.Column("created_at", sa.TIMESTAMP(), nullable=False))
    op.drop_constraint(None, "tasks", type_="foreignkey")
    op.drop_constraint(None, "tasks", type_="foreignkey")
    op.create_foreign_key(None, "tasks", "tenants", ["tenant_id"], ["id"])
    op.create_unique_constraint(
        op.f("uq_tasks_tenant_name"), "tasks", ["tenant_id", "name"]
    )
    op.create_index(op.f("ix_tasks_tenant_id"), "tasks", ["tenant_id"], unique=False)
    op.alter_column(
        "tasks",
        "id",
        existing_type=sa.UUID(),
        type_=sa.NUMERIC(),
        existing_nullable=False,
    )
    op.alter_column(
        "tasks",
        "tenant_id",
        existing_type=sa.UUID(),
        type_=sa.NUMERIC(),
        existing_nullable=False,
    )
    op.drop_column("tasks", "last_modified")
    op.drop_column("tasks", "date_created")
    op.drop_column("tasks", "note")
    op.drop_column("tasks", "parameters")
    op.drop_column("tasks", "git_reference_id")
    op.add_column("task_runs", sa.Column("pool", sa.VARCHAR(), nullable=True))
    op.add_column("task_runs", sa.Column("started_at", sa.TIMESTAMP(), nullable=True))
    op.add_column("task_runs", sa.Column("edge_pred", sa.VARCHAR(), nullable=True))
    op.add_column("task_runs", sa.Column("labels", sqlite.JSON(), nullable=False))
    op.add_column("task_runs", sa.Column("config_toml", sa.VARCHAR(), nullable=True))
    op.add_column("task_runs", sa.Column("payload", sqlite.JSON(), nullable=True))
    op.add_column("task_runs", sa.Column("commit_hexsha", sa.VARCHAR(), nullable=True))
    op.add_column("task_runs", sa.Column("finished_at", sa.TIMESTAMP(), nullable=True))
    op.add_column(
        "task_runs",
        sa.Column(
            "in_degree", sa.INTEGER(), server_default=sa.text("'0'"), nullable=False
        ),
    )
    op.add_column("task_runs", sa.Column("oids", sqlite.JSON(), nullable=True))
    op.drop_constraint(None, "task_runs", type_="foreignkey")
    op.drop_constraint(None, "task_runs", type_="foreignkey")
    op.drop_constraint(None, "task_runs", type_="foreignkey")
    op.drop_constraint(None, "task_runs", type_="foreignkey")
    op.alter_column(
        "task_runs",
        "id",
        existing_type=sa.UUID(),
        type_=sa.NUMERIC(),
        existing_nullable=False,
    )
    op.drop_column("task_runs", "last_modified")
    op.drop_column("task_runs", "date_created")
    op.drop_column("task_runs", "user_id")
    op.drop_column("task_runs", "worker_id")
    op.drop_column("task_runs", "pool_id")
    op.drop_column("task_runs", "task_id")
    op.add_column("secrets", sa.Column("updated_at", sa.TIMESTAMP(), nullable=False))
    op.add_column("secrets", sa.Column("value", sa.TEXT(), nullable=False))
    op.add_column("secrets", sa.Column("created_at", sa.TIMESTAMP(), nullable=False))
    op.add_column("secrets", sa.Column("user_id", sa.NUMERIC(), nullable=False))
    op.drop_constraint(None, "secrets", type_="foreignkey")
    op.drop_constraint(None, "secrets", type_="foreignkey")
    op.create_foreign_key(None, "secrets", "users", ["user_id"], ["id"])
    op.create_foreign_key(None, "secrets", "tenants", ["tenant_id"], ["id"])
    op.drop_constraint("uq_secret_per_tenant", "secrets", type_="unique")
    op.create_unique_constraint(
        op.f("uq_secrets_tenant_name"), "secrets", ["tenant_id", "name"]
    )
    op.create_index(op.f("ix_secrets_user_id"), "secrets", ["user_id"], unique=False)
    op.create_index(
        op.f("ix_secrets_tenant_id"), "secrets", ["tenant_id"], unique=False
    )
    op.alter_column(
        "secrets",
        "id",
        existing_type=sa.UUID(),
        type_=sa.NUMERIC(),
        existing_nullable=False,
    )
    op.alter_column(
        "secrets",
        "tenant_id",
        existing_type=sa.UUID(),
        type_=sa.NUMERIC(),
        existing_nullable=False,
    )
    op.drop_column("secrets", "last_modified")
    op.drop_column("secrets", "date_created")
    op.drop_column("secrets", "description")
    op.drop_column("secrets", "cipher")
    op.drop_column("secrets", "owner_user_id")
    op.add_column("public_keys", sa.Column("key", sa.TEXT(), nullable=False))
    op.add_column(
        "public_keys", sa.Column("updated_at", sa.TIMESTAMP(), nullable=False)
    )
    op.add_column(
        "public_keys", sa.Column("created_at", sa.TIMESTAMP(), nullable=False)
    )
    op.add_column("public_keys", sa.Column("tenant_id", sa.NUMERIC(), nullable=False))
    op.drop_constraint(None, "public_keys", type_="foreignkey")
    op.create_foreign_key(None, "public_keys", "users", ["user_id"], ["id"])
    op.create_foreign_key(None, "public_keys", "tenants", ["tenant_id"], ["id"])
    op.drop_constraint(None, "public_keys", type_="unique")
    op.drop_constraint("uq_public_key_label_per_user", "public_keys", type_="unique")
    op.create_unique_constraint(
        op.f("uq_public_keys_tenant_name"), "public_keys", ["tenant_id", "name"]
    )
    op.create_index(
        op.f("ix_public_keys_user_id"), "public_keys", ["user_id"], unique=False
    )
    op.create_index(
        op.f("ix_public_keys_tenant_id"), "public_keys", ["tenant_id"], unique=False
    )
    op.alter_column(
        "public_keys",
        "id",
        existing_type=sa.UUID(),
        type_=sa.NUMERIC(),
        existing_nullable=False,
    )
    op.alter_column(
        "public_keys",
        "user_id",
        existing_type=sa.UUID(),
        type_=sa.NUMERIC(),
        existing_nullable=False,
    )
    op.drop_column("public_keys", "last_modified")
    op.drop_column("public_keys", "date_created")
    op.drop_column("public_keys", "revoked_at")
    op.drop_column("public_keys", "revoked")
    op.drop_column("public_keys", "fingerprint")
    op.drop_column("public_keys", "key_data")
    op.drop_column("public_keys", "key_type")
    op.add_column(
        "deploy_keys", sa.Column("public_key_id", sa.NUMERIC(), nullable=False)
    )
    op.add_column(
        "deploy_keys", sa.Column("updated_at", sa.TIMESTAMP(), nullable=False)
    )
    op.add_column("deploy_keys", sa.Column("tenant_id", sa.NUMERIC(), nullable=False))
    op.add_column(
        "deploy_keys", sa.Column("created_at", sa.TIMESTAMP(), nullable=False)
    )
    op.add_column("deploy_keys", sa.Column("key", sa.TEXT(), nullable=False))
    op.drop_constraint(None, "deploy_keys", type_="foreignkey")
    op.drop_constraint(None, "deploy_keys", type_="foreignkey")
    op.create_foreign_key(None, "deploy_keys", "public_keys", ["public_key_id"], ["id"])
    op.create_foreign_key(None, "deploy_keys", "tenants", ["tenant_id"], ["id"])
    op.drop_constraint("uq_deploykey_per_user", "deploy_keys", type_="unique")
    op.create_unique_constraint(
        op.f("uq_deploy_keys_tenant_name"), "deploy_keys", ["tenant_id", "name"]
    )
    op.create_index(
        op.f("ix_deploy_keys_tenant_id"), "deploy_keys", ["tenant_id"], unique=False
    )
    op.create_index(
        op.f("ix_deploy_keys_public_key_id"),
        "deploy_keys",
        ["public_key_id"],
        unique=False,
    )
    op.alter_column(
        "deploy_keys",
        "id",
        existing_type=sa.UUID(),
        type_=sa.NUMERIC(),
        existing_nullable=False,
    )
    op.drop_column("deploy_keys", "last_modified")
    op.drop_column("deploy_keys", "date_created")
    op.drop_column("deploy_keys", "read_only")
    op.drop_column("deploy_keys", "secret_id")
    op.drop_column("deploy_keys", "public_key")
    op.drop_column("deploy_keys", "user_id")
    bind = op.get_bind()
    if bind.dialect.name != "sqlite":
        op.alter_column(
            "abuse_records",
            "first_seen",
            existing_type=sa.DateTime(timezone=True),
            type_=sa.TIMESTAMP(),
            existing_nullable=False,
        )
    op.create_table(
        "task_run_deps",
        sa.Column("task_id", sa.NUMERIC(), nullable=False),
        sa.Column("dep_id", sa.NUMERIC(), nullable=False),
        sa.PrimaryKeyConstraint("task_id", "dep_id"),
    )
    op.create_table(
        "artifacts",
        sa.Column("id", sa.NUMERIC(), nullable=False),
        sa.Column("tenant_id", sa.NUMERIC(), nullable=False),
        sa.Column("task_id", sa.NUMERIC(), nullable=True),
        sa.Column("name", sa.VARCHAR(), nullable=False),
        sa.Column("uri", sa.VARCHAR(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=False),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["tasks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tenant_id"],
            ["tenants.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("tenant_id", "name", name=op.f("uq_artifacts_tenant_name")),
    )
    op.create_index(
        op.f("ix_artifacts_tenant_id"), "artifacts", ["tenant_id"], unique=False
    )
    op.create_index(
        op.f("ix_artifacts_task_id"), "artifacts", ["task_id"], unique=False
    )
    op.drop_table("analysis_results")
    op.drop_table("task_run_task_relation_associations")
    op.drop_table("eval_results")
    op.drop_table("raw_blobs")
    op.drop_table("repository_deploy_key_associations")
    op.drop_table("repository_user_associations")
    op.drop_table("project_payloads")
    op.drop_table("pool_worker_associations")
    op.drop_table("peagen_toml_specs")
    op.drop_table("git_references")
    op.drop_table("workers")
    op.drop_table("tenant_user_associations")
    op.drop_table("task_relations")
    op.drop_table("repositories")
    op.drop_table("pools")
    op.drop_table("evolve_specs")
    op.drop_table("doe_specs")
    # ### end Alembic commands ###

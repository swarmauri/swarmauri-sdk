[project]
name = "auto_authn"
version = "0.1.0.dev2"
description = "Multi‑tenant OpenID‑Connect / OAuth2 Identity‑Provider server by Swarmauri."
license = "Apache-2.0"
readme = "README.md"
repository = "http://github.com/swarmauri/swarmauri-sdk"
requires-python = ">=3.10,<3.13"
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
authors = [{ name = "Swarmauri Team", email = "support@swarmauri.com" }]
dependencies = [
    "swarmauri_core",
    "swarmauri_base",
    "swarmauri_standard",
    "swarmauri_tokens_jwt",
    "swarmauri_signing_jws",
    "swarmauri_signing_ed25519",
    "swarmauri_crypto_jwe",
    "swarmauri_keyprovider_file",
    "swarmauri_keyprovider_local",
    "python-multipart>=0.0.9",
    "sqlalchemy[asyncio]>=2.0,<3.0",
    "asyncpg>=0.29,<1.0",
    "aiosqlite>=0.19,<1.0",
    "pydantic>=2.7,<3.0",
    "pydantic-settings>=2.2,<3.0",
    "pydantic[email]",
    "fastapi>=0.111",
    "uvicorn[standard]>=0.29",
    "bcrypt>=4.1",
    "httpx>=0.27",
    "autoapi",
]
keywords = ["oidc", "oauth2", "fastapi", "identity-provider", "jwks", "jwt"]

[tool.uv.sources]
swarmauri_core = { workspace = true }
swarmauri_base = { workspace = true }
swarmauri_standard = { workspace = true }

swarmauri_crypto_jwe  = { workspace = true }
swarmauri_tokens_jwt = { workspace = true }
swarmauri_signing_jws  = { workspace = true }
swarmauri_signing_ed25519  = { workspace = true }
swarmauri_keyprovider_file  = { workspace = true }
swarmauri_keyprovider_local  = { workspace = true }


[tool.pytest.ini_options]
norecursedirs = ["combined", "scripts"]
markers = [
    "test: standard test",
    "unit: Unit tests",
    "i9n: Integration tests",
    "r8n: Regression tests",
    "timeout: mark test to timeout after X seconds",
    "xpass: Expected passes",
    "xfail: Expected failures",
    "acceptance: Acceptance tests",
    "perf: Performance tests that measure execution time and resource usage",
    "example: Usage examples from documentation",
]
timeout = 300
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
addopts = "-m 'not integration'"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[dependency-groups]
dev = [
    "pytest>=8.0",
    "pytest-asyncio>=0.24.0",
    "pytest-xdist>=3.6.1",
    "pytest-json-report>=1.5.0",
    "python-dotenv",
    "requests>=2.32.3",
    "flake8>=7.0",
    "pytest-timeout>=2.3.1",
    "ruff>=0.9.9",
    "pytest-benchmark>=4.0.0",
]
#  > pip install auto-authn[postgres]
postgres = [ "asyncpg>=0.29,<1.0" ]

#  > pip install auto-authn[sqlite]
sqlite   = [ "aiosqlite>=0.19,<1.0" ]

# [project.scripts]
# auto-authn = "auto_authn.cli.__init__:app"   # Typer CLI (if you keep it)
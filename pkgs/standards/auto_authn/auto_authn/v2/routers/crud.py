"""
autoapi_authn.orm
=================

Package-level bootstrap for the authentication serviceâ€™s persistence layer.

Exports
-------
Base       : Declarative base for all models in **autoapi_authn**.
metadata   : Shared SQLAlchemy `MetaData` with a sane naming-convention.
router     : FastAPI router auto-generated by AutoAPI for all auth-tables.
autoapi    : The `AutoAPI` instance used to produce *router*.

The resulting ``crud_api`` exposes resource operations under namespaces like
``crud_api.core.User.create`` and ``crud_api.core_raw.User.create``.

Notes
-----
*   All mix-ins (GUIDPk, Timestamped, TenantBound, etc.) live in
    *autoapi.v3.mixins* and are imported **only** by `tables.py`.
*   Importing this module has the side-effect of importing
    `autoapi_authn.orm.tables`, so every model class is registered with
    the declarative base **before** AutoAPI introspects the metadata.
"""

from __future__ import annotations

from fastapi import APIRouter
from autoapi.v3 import AutoAPI
from auto_authn.v2.orm.tables import (
    Tenant,
    User,
    Client,
    ApiKey,
    Service,
    ServiceKey,
    AuthSession,
)
from ..db import get_async_db  # same module as before

# ----------------------------------------------------------------------
# 3.  Build AutoAPI instance & router
# ----------------------------------------------------------------------
router = APIRouter()
crud_api = AutoAPI(app=router, get_async_db=get_async_db)
crud_api.include_models(
    [Tenant, User, Client, ApiKey, Service, ServiceKey, AuthSession]
)
# Backwards compatibility: expose aggregated router as attribute
crud_api.router = router  # type: ignore[attr-defined]

__all__ = ["crud_api"]

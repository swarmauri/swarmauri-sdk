"""
auto_authn.cli.tenants
==========================
Tenant‚Äëadministration commands.

Examples
--------
# Create a new tenant with autogenerated keys
auto-authn tenants create acme \
    --issuer https://login.acme.localhost \
    --name   "Acme¬†Corp"

# List all tenants
auto-authn tenants list

# Rotate keys for every tenant older than 90¬†days
auto-authn tenants rotate-keys --grace 7776000   # 90¬†days

# Deactivate (soft‚Äëdelete) a tenant
auto-authn tenants deactivate acme
"""

from __future__ import annotations

import asyncio
import json
import logging
from typing import List

import typer
from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession

from ..crypto import bootstrap_jwks, rotate_jwks
from ..db import get_session
from ..models import Tenant

log = logging.getLogger("auth_authn.cli.tenants")

app = typer.Typer(
    help="Manage tenants (customers) in the Auto‚ÄëAuthN IdP.",
    add_completion=False,
)

###############################################################################
# Helpers                                                                     #
###############################################################################


async def _slug_exists(db: AsyncSession, slug: str) -> bool:
    res = await db.execute(select(Tenant.id).where(Tenant.slug == slug))
    return res.scalar_one_or_none() is not None


###############################################################################
# Commands                                                                    #
###############################################################################


@app.command("create")
def create(
    slug: str = typer.Argument(
        ..., help="URL‚Äëfriendly tenant slug (used in sub‚Äëdomain)."
    ),
    issuer: str = typer.Option(
        ..., "--issuer", "-i", help="Absolute issuer URL (https://login.acme.com)"
    ),
    name: str = typer.Option("", "--name", "-n", help="Human‚Äëreadable tenant name."),
):
    """
    Initialise a tenant with fresh RSA keys and store it in the DB.
    """

    async def _inner():
        async for db in get_session():
            if await _slug_exists(db, slug):
                typer.secho(f"‚ùå tenant '{slug}' already exists", fg=typer.colors.RED)
                raise typer.Exit(1)

            jwks_json, kid = bootstrap_jwks()
            tenant = Tenant(slug=slug, issuer=issuer, name=name, jwks_json=jwks_json)
            db.add(tenant)
            await db.commit()
            typer.secho(
                f"‚úÖ tenant '{slug}' created (kid={kid[:8]}‚Ä¶, issuer={issuer})",
                fg=typer.colors.GREEN,
            )

    asyncio.run(_inner())


@app.command("list")
def list_():
    """
    List all tenants with status and key information.
    """

    async def _inner():
        async for db in get_session():
            rows: List[Tenant] = (await db.scalars(select(Tenant))).all()
            if not rows:
                typer.echo("No tenants found.")
                return
            fmt = "{:<12}  {:<40}  {:<5}  {:<20}"
            typer.echo(fmt.format("Slug", "Issuer", "Act?", "Latest¬†kid"))
            typer.echo("-" * 85)
            for t in rows:
                latest_kid = json.loads(t.jwks_json)["keys"][-1]["kid"]
                typer.echo(
                    fmt.format(
                        t.slug,
                        (t.issuer or "")[:38] + ("‚Ä¶" if len(t.issuer) > 38 else ""),
                        "yes" if t.active else "no",
                        latest_kid[:10] + "‚Ä¶",
                    )
                )

    asyncio.run(_inner())


@app.command("rotate-keys")
def rotate_keys(
    grace: int = typer.Option(
        90 * 24 * 3600,
        "--grace",
        "-g",
        show_default=True,
        help="Seconds to keep old signing keys after rotation.",
    ),
):
    """
    Rotate signing keys for **all active tenants**.  Old keys older than `--grace`
    seconds are purged.
    """

    async def _inner():
        rotated = 0
        async for db in get_session():
            tenants: List[Tenant] = (
                await db.scalars(select(Tenant).where(Tenant.active))
            ).all()
            # now = dt.now(timezone.utc)
            for t in tenants:
                old_json = t.jwks_json
                new_json = rotate_jwks(old_json, retain_seconds=grace)
                if new_json != old_json:
                    t.jwks_json = new_json
                    rotated += 1
                    typer.echo(f"üîë  rotated tenant={t.slug}")
            if rotated:
                await db.commit()
        if rotated:
            typer.secho(
                f"‚úÖ rotated keys for {rotated} tenant(s)", fg=typer.colors.GREEN
            )
        else:
            typer.echo("No tenants required rotation.")

    asyncio.run(_inner())


@app.command("deactivate")
def deactivate(
    slug: str = typer.Argument(..., help="Tenant slug to deactivate."),
):
    """
    Soft‚Äëdelete (deactivate) a tenant.  Tokens remain valid until expiry, but new
    logins are blocked.
    """

    async def _inner():
        async for db in get_session():
            res = (
                await db.execute(
                    update(Tenant)
                    .where(Tenant.slug == slug)
                    .values(active=False)
                    .returning(Tenant.id)
                )
            ).scalar_one_or_none()
            if res is None:
                typer.echo(f"No such tenant '{slug}'")
                raise typer.Exit(1)
            await db.commit()
            typer.secho(f"üö´ tenant '{slug}' deactivated", fg=typer.colors.YELLOW)

    asyncio.run(_inner())


@app.command("activate")
def activate(
    slug: str = typer.Argument(..., help="Tenant slug to reactivate."),
):
    """
    Reactivate a previously deactivated tenant.
    """

    async def _inner():
        async for db in get_session():
            res = (
                await db.execute(
                    update(Tenant)
                    .where(Tenant.slug == slug)
                    .values(active=True)
                    .returning(Tenant.id)
                )
            ).scalar_one_or_none()
            if res is None:
                typer.echo(f"No such tenant '{slug}'")
                raise typer.Exit(1)
            await db.commit()
            typer.secho(f"‚úÖ tenant '{slug}' reactivated", fg=typer.colors.GREEN)

    asyncio.run(_inner())

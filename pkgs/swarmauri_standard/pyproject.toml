[project]
name = "swarmauri-standard"
version = "0.6.2.dev3"
description = "This repository includes standard components within the Swarmauri framework."
authors = [
    { name = "Jacob Stewart", email = "jacob@swarmauri.com" },
    ]
license = "Apache-2.0"
readme = { file = "README.md", content-type = "text/markdown" }
repository = "http://github.com/swarmauri/swarmauri-sdk"
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]
requires-python = ">=3.10,<3.13"
dependencies = [
"toml>=0.10.2",
"pydantic>=2.9.2",
"httpx>=0.27.0",
"numpy",
"pandas",
"joblib>=1.4.0",
"pillow>=11.1.0",
"aiofiles",
"typing_extensions",
"swarmauri_core",
"swarmauri_base",

]

[tool.uv.workspace]
members = [
"swarmauri_standard/state/DictState.py",
"swarmauri_standard/task_mgmt_strategies/RoundRobinStrategy.py",
"swarmauri_standard/agents/RagAgent.py",
"swarmauri_standard/agents/QAAgent.py",
"swarmauri_standard/agents/SimpleConversationAgent.py",
"swarmauri_standard/agents/ToolAgent.py",
"swarmauri_standard/chunkers/DelimiterBasedChunker.py",
"swarmauri_standard/chunkers/MdSnippetChunker.py",
"swarmauri_standard/chunkers/SentenceChunker.py",
"swarmauri_standard/chunkers/FixedLengthChunker.py",
"swarmauri_standard/chunkers/SlidingWindowChunker.py",
"swarmauri_standard/documents/Document.py",
"swarmauri_standard/factories/Factory.py",
"swarmauri_standard/factories/AgentFactory.py",
"swarmauri_standard/toolkits/AccessibilityToolkit.py",
"swarmauri_standard/toolkits/Toolkit.py",
"swarmauri_standard/vectors/Vector.py",
"swarmauri_standard/prompts/Prompt.py",
"swarmauri_standard/prompts/PromptMatrix.py",
"swarmauri_standard/prompts/PromptGenerator.py",
"swarmauri_standard/llms/GroqVisionModel.py",
"swarmauri_standard/llms/DeepSeekModel.py",
"swarmauri_standard/llms/HyperbolicAudioTTS.py",
"swarmauri_standard/llms/GroqToolModel.py",
"swarmauri_standard/llms/FalAIVisionModel.py",
"swarmauri_standard/llms/CohereModel.py",
"swarmauri_standard/llms/OpenAIToolModel.py",
"swarmauri_standard/llms/LlamaCppModel.py",
"swarmauri_standard/llms/AI21StudioModel.py",
"swarmauri_standard/llms/AnthropicToolModel.py",
"swarmauri_standard/llms/GeminiProModel.py",
"swarmauri_standard/llms/GroqModel.py",
"swarmauri_standard/llms/OpenAIReasonModel.py",
"swarmauri_standard/llms/MistralModel.py",
"swarmauri_standard/llms/AnthropicModel.py",
"swarmauri_standard/llms/WhisperLargeModel.py",
"swarmauri_standard/llms/PlayHTModel.py",
"swarmauri_standard/llms/OpenAIModel.py",
"swarmauri_standard/llms/OpenAIAudio.py",
"swarmauri_standard/llms/PerplexityModel.py",
"swarmauri_standard/llms/GeminiToolModel.py",
"swarmauri_standard/llms/MistralToolModel.py",
"swarmauri_standard/llms/GroqAIAudio.py",
"swarmauri_standard/llms/OpenAIAudioTTS.py",
"swarmauri_standard/llms/HyperbolicModel.py",
"swarmauri_standard/llms/DeepInfraModel.py",
"swarmauri_standard/llms/HyperbolicVisionModel.py",
"swarmauri_standard/llms/CohereToolModel.py",
"swarmauri_standard/transports/PubSubTransport.py",
"swarmauri_standard/tool_llms/GroqToolModel.py",
"swarmauri_standard/tool_llms/OpenAIToolModel.py",
"swarmauri_standard/tool_llms/AnthropicToolModel.py",
"swarmauri_standard/tool_llms/GeminiToolModel.py",
"swarmauri_standard/tool_llms/MistralToolModel.py",
"swarmauri_standard/tool_llms/CohereToolModel.py",
"swarmauri_standard/parsers/CSVParser.py",
"swarmauri_standard/parsers/HTMLTagStripParser.py",
"swarmauri_standard/parsers/PythonParser.py",
"swarmauri_standard/parsers/Md2HtmlParser.py",
"swarmauri_standard/parsers/URLExtractorParser.py",
"swarmauri_standard/parsers/RegExParser.py",
"swarmauri_standard/parsers/PhoneNumberExtractorParser.py",
"swarmauri_standard/parsers/OpenAPISpecParser.py",
"swarmauri_standard/parsers/XMLParser.py",
"swarmauri_standard/swarms/Swarm.py",
"swarmauri_standard/vector_stores/TfidfVectorStore.py",
"swarmauri_standard/tracing/CallableTracer.py",
"swarmauri_standard/tracing/SimpleTraceContext.py",
"swarmauri_standard/tracing/SimpleTracer.py",
"swarmauri_standard/tracing/VariableTracer.py",
"swarmauri_standard/tracing/TracedVariable.py",
"swarmauri_standard/tracing/ChainTracer.py",
"swarmauri_standard/decorators/maybe_async.py",
"swarmauri_standard/decorators/tool_decorator.py",
"swarmauri_standard/decorators/retry_on_status_codes.py",
"swarmauri_standard/decorators/deprecate.py",
"swarmauri_standard/messages/FunctionMessage.py",
"swarmauri_standard/messages/HumanMessage.py",
"swarmauri_standard/messages/AgentMessage.py",
"swarmauri_standard/messages/SystemMessage.py",
"swarmauri_standard/chains/PromptContextChain.py",
"swarmauri_standard/chains/ContextChain.py",
"swarmauri_standard/chains/CallableChain.py",
"swarmauri_standard/chains/ChainStep.py",
"swarmauri_standard/conversations/MaxSystemContextConversation.py",
"swarmauri_standard/conversations/SessionCacheConversation.py",
"swarmauri_standard/conversations/Conversation.py",
"swarmauri_standard/conversations/MaxSizeConversation.py",
"swarmauri_standard/prompt_templates/PromptTemplate.py",
"swarmauri_standard/service_registries/ServiceRegistry.py",
"swarmauri_standard/tools/Parameter.py",
"swarmauri_standard/tools/WeatherTool.py",
"swarmauri_standard/tools/FleschKincaidTool.py",
"swarmauri_standard/tools/JSONRequestsTool.py",
"swarmauri_standard/tools/CalculatorTool.py",
"swarmauri_standard/tools/GunningFogTool.py",
"swarmauri_standard/tools/CodeInterpreterTool.py",
"swarmauri_standard/tools/ImportMemoryModuleTool.py",
"swarmauri_standard/tools/ColemanLiauIndexTool.py",
"swarmauri_standard/tools/FleschReadingEaseTool.py",
"swarmauri_standard/tools/AdditionTool.py",
"swarmauri_standard/tools/CodeExtractorTool.py",
"swarmauri_standard/tools/AutomatedReadabilityIndexTool.py",
"swarmauri_standard/tools/TestTool.py",
"swarmauri_standard/tools/RequestsTool.py",
"swarmauri_standard/tools/TemperatureConverterTool.py",
"swarmauri_standard/pipelines/Pipeline.py",
"swarmauri_standard/control_panels/ControlPanel.py",
"swarmauri_standard/tts/PlayhtTTS.py",
"swarmauri_standard/tts/OpenaiTTS.py",
"swarmauri_standard/tts/HyperbolicTTS.py",
"swarmauri_standard/stt/GroqSTT.py",
"swarmauri_standard/stt/WhisperLargeSTT.py",
"swarmauri_standard/stt/OpenaiSTT.py",
"swarmauri_standard/embeddings/TfidfEmbedding.py",
"swarmauri_standard/embeddings/VoyageEmbedding.py",
"swarmauri_standard/embeddings/GeminiEmbedding.py",
"swarmauri_standard/embeddings/CohereEmbedding.py",
"swarmauri_standard/embeddings/MistralEmbedding.py",
"swarmauri_standard/embeddings/OpenAIEmbedding.py",
"swarmauri_standard/vlms/GroqVLM.py",
"swarmauri_standard/vlms/FalVLM.py",
"swarmauri_standard/vlms/HyperbolicVLM.py",
"swarmauri_standard/schema_converters/GeminiSchemaConverter.py",
"swarmauri_standard/schema_converters/ShuttleAISchemaConverter.py",
"swarmauri_standard/schema_converters/OpenAISchemaConverter.py",
"swarmauri_standard/schema_converters/MistralSchemaConverter.py",
"swarmauri_standard/schema_converters/GroqSchemaConverter.py",
"swarmauri_standard/schema_converters/AnthropicSchemaConverter.py",
"swarmauri_standard/schema_converters/CohereSchemaConverter.py",
"swarmauri_standard/measurements/UniquenessMeasurement.py",
"swarmauri_standard/measurements/FirstImpressionMeasurement.py",
"swarmauri_standard/measurements/PatternMatchingMeasurement.py",
"swarmauri_standard/measurements/ZeroMeasurement.py",
"swarmauri_standard/measurements/MeanMeasurement.py",
"swarmauri_standard/measurements/RatioOfSumsMeasurement.py",
"swarmauri_standard/measurements/MissingnessMeasurement.py",
"swarmauri_standard/measurements/CompletenessMeasurement.py",
"swarmauri_standard/measurements/StaticMeasurement.py",
"swarmauri_standard/measurements/MiscMeasurement.py",
"swarmauri_standard/measurements/DistinctivenessMeasurement.py",
"swarmauri_standard/distances/ChiSquaredDistance.py",
"swarmauri_standard/distances/SquaredEuclideanDistance.py",
"swarmauri_standard/distances/ManhattanDistance.py",
"swarmauri_standard/distances/LevenshteinDistance.py",
"swarmauri_standard/distances/EuclideanDistance.py",
"swarmauri_standard/distances/CanberraDistance.py",
"swarmauri_standard/distances/HaversineDistance.py",
"swarmauri_standard/distances/JaccardIndexDistance.py",
"swarmauri_standard/distances/CosineDistance.py",
"swarmauri_standard/distances/ChebyshevDistance.py",
"swarmauri_standard/distances/SorensenDiceDistance.py",
"swarmauri_standard/dataconnectors/GoogleDriveDataConnector.py",
"swarmauri_standard/exceptions/IndexErrorWithContext.py",
"swarmauri_standard/image_gens/HyperbolicImgGenModel.py",
"swarmauri_standard/image_gens/DeepInfraImgGenModel.py",
"swarmauri_standard/image_gens/OpenAIImgGenModel.py",
"swarmauri_standard/image_gens/FalAIImgGenModel.py",
"swarmauri_standard/image_gens/BlackForestImgGenModel.py"
]

[tool.uv.sources]
swarmauri_core = { workspace = true }
swarmauri_base = { workspace = true }


[tool.setuptools]
extras = ["dev"]

[dependency-groups]
dev = [
"flake8>=7.0",
"pytest>=8.0",
"pytest-asyncio>=0.24.0",
"pytest-xdist>=3.6.1",
"pytest-json-report>=1.5.0",
"pytest-timeout>=2.3.1",
"python-dotenv>=1.0.0",
"jsonschema>=4.18.5",
"ipython>=8.28.0",
"requests>=2.32.3",
]

[tool.pytest.ini_options]
timeout = 5
asyncio_mode = "auto"

markers = [
    "test: standard test",
    "unit: Unit tests",
    "i9n: Integration Tests",
    "r8n: Regression Tests",
    "timeout: mark test to timeout after X seconds",
    "xfail: Expected failures",
    "xpass: Expected passes",
    "acceptance: Acceptance tests"
]


log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_default_fixture_loop_scope = "function"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

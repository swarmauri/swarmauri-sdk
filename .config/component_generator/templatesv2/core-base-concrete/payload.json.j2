[
  {
    "FILE_NAME": "{% raw %}{{ PROJECT_ROOT }}/core/swarmauri_core/{{ RESOURCE_KIND }}/{{ INTERFACE_NAME }}.py{% endraw %}",
    "PURPOSE": "Implements the new component's main class.",
    "DESCRIPTION": "This file defines the abstract class implementation.",
    "REQUIREMENTS": [
      "Do not implementation logic.",
      "Ensure that all methods are abstractmethods.",
      "Inlcude proper type hints."
      {% if CORE_ADDITIONAL_REQUIREMENTS %}
        {% for requirement in CORE_ADDITIONAL_REQUIREMENTS %},
        "{{ requirement }}"
        {% endfor %}
      {% endif %}
    ],
    "PROCESS_TYPE": "GENERATE",
    "EXAMPLES": []
  }
  {% if NEW_RESOURCE_KIND %},
  {
    "FILE_NAME": "{% raw %}{{ PROJECT_ROOT }}/core/swarmauri_core/{{ RESOURCE_KIND }}/__init__.py{% endraw %}",
    "PROCESS_TYPE": "COPY"
  }
  {% endif %},
  {
    "FILE_NAME": "{% raw %}{{ PROJECT_ROOT }}/base/swarmauri_base/{{ RESOURCE_KIND }}/{{ BASE_CLASS_NAME }}.py{% endraw %}",
    "PURPOSE": "Implements the new component's main class.",
    "DESCRIPTION": "This file defines the abstract class implementation.",
    "REQUIREMENTS": [
      "Do not implementation logic.",
      "Ensure that all methods are abstractmethods.",
      "Inlcude proper type hints."
      {% if BASE_ADDITIONAL_REQUIREMENTS %}
        {% for requirement in BASE_ADDITIONAL_REQUIREMENTS %},
        "{{ requirement }}"
        {% endfor %}
      {% endif %}
    ],
    "PROCESS_TYPE": "GENERATE",
    "DEPENDENCIES": [
      "{% raw %}{{ PROJECT_ROOT }}/core/swarmauri_core/{{ RESOURCE_KIND }}/{{ INTERFACE_NAME }}.py{% endraw %}"
    ]
  }
  {% if NEW_RESOURCE_KIND %},
  {
    "FILE_NAME": "{% raw %}{{ PROJECT_ROOT }}/base/swarmauri_base/{{ BASE_CLASS_NAME }}/__init__.py{% endraw %}",
    "PROCESS_TYPE": "COPY"
  }
  {% endif %},
  {
    "FILE_NAME": "{% raw %}{{ PROJECT_ROOT }}/{{ CITIZENSHIP }}/{{ PACKAGE_ROOT }}/{{ PACKAGE_ROOT }}/{{ MODULE_NAME }}.py{% endraw %}",
    "PURPOSE": "Implements the new component's main class.",
    "DESCRIPTION": "This file defines the concrete class implementation.",
    "REQUIREMENTS": [
      "Provide implementation logic for inherited methods when applicable.",
      "Ensure that all methods include complete, comprehensive, and fully functional implementation logic."
      {% if CONCRETE_ADDITIONAL_REQUIREMENTS %}
        {% for requirement in CONCRETE_ADDITIONAL_REQUIREMENTS %},
        "{{ requirement }}"
        {% endfor %}
      {% endif %}
    ],
    "DEPENDENCIES": [ 
      "{{ PROJECT_ROOT }}/base/swarmauri_base/{{ RESOURCE_KIND }}/{{ BASE_CLASS_NAME }}.py"
      {% if EXTERNAL_DOC_FILE %},
        {% for doc_item in EXTERNAL_DOC_FILE %}
          "{% raw %}{{ doc_item }}{% endraw %}"{% if not loop.last %}, {% endif %}
        {% endfor %}
      {% endif %}
    ],
    "PROCESS_TYPE": "GENERATE",
    "BASE_CLASS": "{{ BASE_CLASS_NAME }}",
    "MIXINS": [],
    "EXAMPLES": [
      {% if CONCRETE_EXAMPLE_FILE %}
        "{{ CONCRETE_EXAMPLE_FILE }}"
        {% if EXTERNAL_DOC_EXAMPLE_FILE %}
          , "{{ EXTERNAL_DOC_EXAMPLE_FILE }}"
        {% endif %}
      {% elif EXTERNAL_DOC_EXAMPLE_FILE %}
        "{{ EXTERNAL_DOC_EXAMPLE_FILE }}"
      {% endif %}
    ]
  },
  {
    "FILE_NAME": "{% raw %}{{ PROJECT_ROOT }}/{{ CITIZENSHIP }}/{{ PACKAGE_ROOT }}/{{ PACKAGE_ROOT }}/__init__.py{% endraw %}",
    "PURPOSE": "Initializes the new component's package.",
    "DESCRIPTION": "Exposes and imports the main class from {{ MODULE_NAME }}.py.",
    "REQUIREMENTS": [
      "Should import the class defined in {{ MODULE_NAME }}.py."
    ],
    "DEPENDENCIES": [],
    "PROCESS_TYPE": "COPY"
  },
  {
    "FILE_NAME": "{% raw %}{{ PROJECT_ROOT }}/{{ CITIZENSHIP }}/{{ PACKAGE_ROOT }}/tests/unit/test_{{ MODULE_NAME }}.py{% endraw %}",
    "PURPOSE": "Contains pytest based test cases for the new component class.",
    "DESCRIPTION": "Verifies the functionality and correctness of the class in {{ MODULE_NAME }}.py.",
    "REQUIREMENTS": [
      "Should import and test the class from the main module."
    ],
    "DEPENDENCIES": [
      "{% raw %}{{ PROJECT_ROOT }}/{{ CITIZENSHIP }}/{{ PACKAGE_ROOT }}/{{ PACKAGE_ROOT }}/{{ MODULE_NAME }}.py{% endraw %}"
    ],
    "PROCESS_TYPE": "GENERATE"
  },
  {
    "FILE_NAME": "{% raw %}{{ PROJECT_ROOT }}/{{ CITIZENSHIP }}/{{ PACKAGE_ROOT }}/tests/unit/test___init__.py{% endraw %}",
    "PURPOSE": "Contains pytest based test cases for the package initialization.",
    "DESCRIPTION": "Ensures __init__.py correctly exposes the new component class.",
    "REQUIREMENTS": [
      "Should import from the package's __init__.py file."
    ],
    "DEPENDENCIES": [
      "{% raw %}{{ PROJECT_ROOT }}/{{ CITIZENSHIP }}/{{ PACKAGE_ROOT }}/{{ PACKAGE_ROOT }}/__init__.py{% endraw %}"
    ],
    "PROCESS_TYPE": "GENERATE"
  },
  {
    "FILE_NAME": "{% raw %}{{ PROJECT_ROOT }}/{{ CITIZENSHIP }}/{{ PACKAGE_ROOT }}/README.md{% endraw %}",
    "PURPOSE": "Create a comprehensive README.md, detailing usage of the new component.",
    "DESCRIPTION": "Includes branding header, installation and usage instructions, and examples for {{ MODULE_NAME }}.py",
    "REQUIREMENTS": [
      "Include all of the HTML header shown in the example output.",
      "Based on the dependencies, create comprehensive installation and usage documentation sections.",
      "The installation and usage documentation sections should be significantly more complete than the example format provided.",
      "Do not include details regarding cloning or forking the repository."
    ],
    "DEPENDENCIES": [
      "{% raw %}{{ PROJECT_ROOT }}/{{ CITIZENSHIP }}/{{ PACKAGE_ROOT }}/{{ PACKAGE_ROOT }}/{{ MODULE_NAME }}.py{% endraw %}",
      "{% raw %}{{ PROJECT_ROOT }}/{{ CITIZENSHIP }}/{{ PACKAGE_ROOT }}/{{ PACKAGE_ROOT }}/__init__.py{% endraw %}",
      "{% raw %}{{ PROJECT_ROOT }}/{{ CITIZENSHIP }}/{{ PACKAGE_ROOT }}/pyproject.toml{% endraw %}"
    ],
    "PROCESS_TYPE": "GENERATE"
  },
  {
    "FILE_NAME": "{% raw %}{{ PROJECT_ROOT }}/{{ CITIZENSHIP }}/{{ PACKAGE_ROOT }}/LICENSE{% endraw %}",
    "PURPOSE": "Defines the licensing terms for this project.",
    "DESCRIPTION": "Contains the open-source (or proprietary) LICENSE text.",
    "PROCESS_TYPE": "COPY"
  },
  {
    "FILE_NAME": "{% raw %}{{ PROJECT_ROOT }}/{{ CITIZENSHIP }}/{{ PACKAGE_ROOT }}/pyproject.toml{% endraw %}",
    "PURPOSE": "Specifies Python project metadata and dependencies.",
    "DESCRIPTION": "Indicates the projectâ€™s name, version, dependencies, and build system.",
    "REQUIREMENTS": [
      "Must reference the main module, README, and LICENSE as applicable."
    ],
    "DEPENDENCIES": [
      "{% raw %}{{ PROJECT_ROOT }}/{{ CITIZENSHIP }}/{{ PACKAGE_ROOT }}/{{ PACKAGE_ROOT }}/{{ MODULE_NAME }}.py{% endraw %}",
      "{% raw %}{{ PROJECT_ROOT }}/{{ CITIZENSHIP }}/{{ PACKAGE_ROOT }}/{{ PACKAGE_ROOT }}/__init__.py{% endraw %}",
      "{% raw %}{{ PROJECT_ROOT }}/{{ CITIZENSHIP }}/{{ PACKAGE_ROOT }}/LICENSE{% endraw %}"
    ],
    "PROCESS_TYPE": "GENERATE"
  }
]
